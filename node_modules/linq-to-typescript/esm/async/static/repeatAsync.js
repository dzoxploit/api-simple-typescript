import { ArgumentOutOfRangeException } from "../../shared/index.js";
import { BasicAsyncEnumerable } from "../BasicAsyncEnumerable.js";
export const repeatAsync = (element, count, delay) => {
    if (count < 0) {
        throw new ArgumentOutOfRangeException("count");
    }
    if (delay) {
        return repeat2(element, count, delay);
    }
    else {
        return repeat1(element, count);
    }
};
const repeat1 = (element, count) => {
    async function* iterator() {
        for (let i = 0; i < count; i++) {
            yield element;
        }
    }
    return new BasicAsyncEnumerable(iterator);
};
const repeat2 = (element, count, delay) => {
    async function* iterator() {
        for (let i = 0; i < count; i++) {
            yield await new Promise((resolve) => setTimeout(() => resolve(element), delay));
        }
    }
    return new BasicAsyncEnumerable(iterator);
};
