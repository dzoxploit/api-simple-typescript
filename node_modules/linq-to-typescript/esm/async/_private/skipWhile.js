import { BasicAsyncEnumerable } from "../BasicAsyncEnumerable.js";
export const skipWhile = (source, predicate) => {
    if (predicate.length === 1) {
        return skipWhile1(source, predicate);
    }
    else {
        return skipWhile2(source, predicate);
    }
};
const skipWhile1 = (source, predicate) => {
    async function* iterator() {
        let skip = true;
        for await (const item of source) {
            if (skip === false) {
                yield item;
            }
            else if (predicate(item) === false) {
                skip = false;
                yield item;
            }
        }
    }
    return new BasicAsyncEnumerable(iterator);
};
const skipWhile2 = (source, predicate) => {
    async function* iterator() {
        let index = 0;
        let skip = true;
        for await (const item of source) {
            if (skip === false) {
                yield item;
            }
            else if (predicate(item, index) === false) {
                skip = false;
                yield item;
            }
            index++;
        }
    }
    return new BasicAsyncEnumerable(iterator);
};
