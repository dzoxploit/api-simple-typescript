import { ErrorString, InvalidOperationException } from "../../shared/index.js";
export const single = (source, predicate) => {
    if (predicate) {
        return single2(source, predicate);
    }
    else {
        return single1(source);
    }
};
const single1 = async (source) => {
    let hasValue = false;
    let singleValue = null;
    for await (const value of source) {
        if (hasValue === true) {
            throw new InvalidOperationException(ErrorString.MoreThanOneElement);
        }
        else {
            hasValue = true;
            singleValue = value;
        }
    }
    if (hasValue === false) {
        throw new InvalidOperationException(ErrorString.NoElements);
    }
    return singleValue;
};
const single2 = async (source, predicate) => {
    let hasValue = false;
    let singleValue = null;
    for await (const value of source) {
        if (predicate(value)) {
            if (hasValue === true) {
                throw new InvalidOperationException(ErrorString.MoreThanOneMatchingElement);
            }
            else {
                hasValue = true;
                singleValue = value;
            }
        }
    }
    if (hasValue === false) {
        throw new InvalidOperationException(ErrorString.NoMatch);
    }
    return singleValue;
};
