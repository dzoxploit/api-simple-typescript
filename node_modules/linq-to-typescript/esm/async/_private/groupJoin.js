import { BasicAsyncEnumerable } from "../BasicAsyncEnumerable.js";
export const groupJoin = (outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer) => {
    const generator = comparer ?
        groupJoinWithComparer(outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer) :
        groupJoinSimple(outer, inner, outerKeySelector, innerKeySelector, resultSelector);
    return new BasicAsyncEnumerable(generator);
};
const groupJoinWithComparer = (outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer) => {
    return async function* () {
        var _a;
        const innerKeyMap = [];
        for await (const innerValue of inner) {
            const key = innerKeySelector(innerValue);
            const record = innerKeyMap.find(x => comparer(x.key, key));
            if (record) {
                record.values.push(innerValue);
            }
            else {
                innerKeyMap.push({ key, values: [innerValue] });
            }
        }
        for await (const outerValue of outer) {
            const key = outerKeySelector(outerValue);
            const innerRecord = (_a = innerKeyMap.find(x => comparer(x.key, key))) !== null && _a !== void 0 ? _a : { key, values: [] };
            yield resultSelector(outerValue, innerRecord.values);
        }
    };
};
const groupJoinSimple = (outer, inner, outerKeySelector, innerKeySelector, resultSelector) => {
    return async function* () {
        var _a;
        const innerKeyMap = new Map();
        for await (const innerValue of inner) {
            const key = innerKeySelector(innerValue);
            const values = innerKeyMap.get(key);
            if (values) {
                values.push(innerValue);
            }
            else {
                innerKeyMap.set(key, [innerValue]);
            }
        }
        for await (const outerValue of outer) {
            const key = outerKeySelector(outerValue);
            const values = (_a = innerKeyMap.get(key)) !== null && _a !== void 0 ? _a : [];
            yield resultSelector(outerValue, values);
        }
    };
};
