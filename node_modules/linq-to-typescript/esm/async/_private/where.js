import { BasicAsyncEnumerable } from "../BasicAsyncEnumerable.js";
export const where = (source, predicate) => {
    if (predicate.length === 1) {
        return where1(source, predicate);
    }
    else {
        return where2(source, predicate);
    }
};
const where1 = (source, predicate) => {
    async function* iterator() {
        for await (const item of source) {
            if (predicate(item) === true) {
                yield item;
            }
        }
    }
    return new BasicAsyncEnumerable(iterator);
};
const where2 = (source, predicate) => {
    async function* iterator() {
        let i = 0;
        for await (const item of source) {
            if (predicate(item, i++) === true) {
                yield item;
            }
        }
    }
    return new BasicAsyncEnumerable(iterator);
};
