import { asAsyncSortedKeyValues } from "./_ordered/asAsyncSortedKeyValues.js";
import { asAsyncSortedKeyValuesSync } from "./_ordered/asAsyncSortedKeyValuesSync.js";
import { asSortedKeyValues } from "./_ordered/asSortedKeyValues.js";
import { asSortedKeyValuesSync } from "./_ordered/asSortedKeyValuesSync.js";
import { BasicParallelEnumerable } from "./BasicParallelEnumerable.js";
export class OrderedParallelEnumerable extends BasicParallelEnumerable {
    constructor(orderedPairs) {
        super({
            generator: async () => {
                const asyncVals = orderedPairs();
                const array = [];
                for await (const val of asyncVals) {
                    array.push(...val);
                }
                return array;
            },
            type: 0,
        });
        this.orderedPairs = orderedPairs;
    }
    static generateAsync(source, keySelector, ascending, comparer) {
        let orderedPairs;
        if (source instanceof OrderedParallelEnumerable) {
            orderedPairs = async function* () {
                for await (const pair of source.orderedPairs()) {
                    yield* asAsyncSortedKeyValuesSync(pair, keySelector, ascending, comparer);
                }
            };
        }
        else {
            orderedPairs = () => asAsyncSortedKeyValues(source, keySelector, ascending, comparer);
        }
        return new OrderedParallelEnumerable(orderedPairs);
    }
    static generate(source, keySelector, ascending, comparer) {
        let orderedPairs;
        if (source instanceof OrderedParallelEnumerable) {
            orderedPairs = async function* () {
                for await (const pair of source.orderedPairs()) {
                    yield* asSortedKeyValuesSync(pair, keySelector, ascending, comparer);
                }
            };
        }
        else {
            orderedPairs = () => asSortedKeyValues(source, keySelector, ascending, comparer);
        }
        return new OrderedParallelEnumerable(orderedPairs);
    }
    thenBy(keySelector, comparer) {
        return OrderedParallelEnumerable.generate(this, keySelector, true, comparer);
    }
    thenByAsync(keySelector, comparer) {
        return OrderedParallelEnumerable.generateAsync(this, keySelector, true, comparer);
    }
    thenByDescending(keySelector, comparer) {
        return OrderedParallelEnumerable.generate(this, keySelector, false, comparer);
    }
    thenByDescendingAsync(keySelector, comparer) {
        return OrderedParallelEnumerable.generateAsync(this, keySelector, false, comparer);
    }
}
