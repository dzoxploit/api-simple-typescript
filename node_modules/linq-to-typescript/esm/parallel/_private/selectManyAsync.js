import { BasicParallelEnumerable } from "../BasicParallelEnumerable.js";
import { nextIterationAsync } from "./_nextIterationAsync.js";
import { nextIterationWithIndexAsync } from "./_nextIterationWithIndexAsync.js";
export const selectManyAsync = (source, selector) => {
    const generator = async () => {
        let values;
        if (selector.length === 1) {
            values = nextIterationAsync(source, selector);
        }
        else {
            values = nextIterationWithIndexAsync(source, selector);
        }
        const valuesArray = [];
        switch (values.type) {
            case 1: {
                for (const outer of values.generator()) {
                    for (const y of await outer) {
                        valuesArray.push(y);
                    }
                }
                break;
            }
            case 2: {
                for (const outer of await values.generator()) {
                    for (const y of await outer) {
                        valuesArray.push(y);
                    }
                }
                break;
            }
        }
        return valuesArray;
    };
    return new BasicParallelEnumerable({
        generator,
        type: 0,
    });
};
