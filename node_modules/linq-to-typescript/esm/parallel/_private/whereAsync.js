import { BasicParallelEnumerable } from "../BasicParallelEnumerable.js";
import { nextIterationWithIndexAsync } from "./_nextIterationWithIndexAsync.js";
import { typeDataToArray } from "./_typeDataToArray.js";
export const whereAsync = (source, predicate) => {
    const generator = async () => {
        const dataFunc = nextIterationWithIndexAsync(source, async (value, index) => {
            const keep = await predicate(value, index);
            return [keep, value];
        });
        const valuesAsync = await typeDataToArray(dataFunc);
        const filteredValues = [];
        for (const [keep, value] of valuesAsync) {
            if (keep) {
                filteredValues.push(value);
            }
        }
        return filteredValues;
    };
    return new BasicParallelEnumerable({
        generator,
        type: 0,
    });
};
