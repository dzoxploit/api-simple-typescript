import { Grouping } from "../../sync/Grouping.js";
import { BasicParallelEnumerable } from "../BasicParallelEnumerable.js";
export const groupBy = (source, keySelector, comparer) => {
    if (comparer) {
        return groupBy_0(source, keySelector, comparer);
    }
    else {
        return groupBy_0_Simple(source, keySelector);
    }
};
const groupBy_0_Simple = (source, keySelector) => {
    const generator = async () => {
        const keyMap = {};
        for (const value of await source.toArray()) {
            const key = keySelector(value);
            const grouping = keyMap[key];
            if (grouping) {
                grouping.push(value);
            }
            else {
                keyMap[key] = new Grouping(key, value);
            }
        }
        const results = new Array();
        for (const value in keyMap) {
            results.push(keyMap[value]);
        }
        return results;
    };
    return new BasicParallelEnumerable({
        generator,
        type: 0,
    });
};
const groupBy_0 = (source, keySelector, comparer) => {
    const generator = async () => {
        const keyMap = new Array();
        for (const value of await source.toArray()) {
            const key = keySelector(value);
            let found = false;
            for (let i = 0; i < keyMap.length; i++) {
                const group = keyMap[i];
                if (comparer(group.key, key)) {
                    group.push(value);
                    found = true;
                    break;
                }
            }
            if (found === false) {
                keyMap.push(new Grouping(key, value));
            }
        }
        const results = new Array();
        for (const g of keyMap) {
            results.push(g);
        }
        return results;
    };
    return new BasicParallelEnumerable({
        generator,
        type: 0,
    });
};
