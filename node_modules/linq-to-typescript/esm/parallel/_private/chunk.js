import { BasicParallelEnumerable } from "../BasicParallelEnumerable.js";
import { ArgumentOutOfRangeException } from "../../shared/index.js";
export const chunk = (source, size) => {
    if (size < 1) {
        throw new ArgumentOutOfRangeException("index");
    }
    let dataFunc;
    switch (source.dataFunc.type) {
        case 1:
            const arrayOfPromises = source.dataFunc.generator;
            dataFunc = {
                type: 1,
                generator: () => {
                    const chunks = [];
                    let yieldChunk = [];
                    for (const promise of arrayOfPromises()) {
                        yieldChunk.push(promise);
                        if (yieldChunk.length === size) {
                            chunks.push(Promise.all(yieldChunk));
                            yieldChunk = [];
                        }
                    }
                    if (yieldChunk.length) {
                        chunks.push(Promise.all(yieldChunk));
                    }
                    return chunks;
                }
            };
            break;
        case 2:
            const promiseOfPromises = source.dataFunc.generator;
            dataFunc = {
                type: 2,
                generator: async () => {
                    const chunks = [];
                    let yieldChunk = [];
                    for (const promise of await promiseOfPromises()) {
                        yieldChunk.push(promise);
                        if (yieldChunk.length === size) {
                            chunks.push(Promise.all(yieldChunk));
                            yieldChunk = [];
                        }
                    }
                    if (yieldChunk.length) {
                        chunks.push(Promise.all(yieldChunk));
                    }
                    return chunks;
                }
            };
            break;
        case 0:
            const promiseToArray = source.dataFunc.generator;
            dataFunc = {
                type: 0,
                generator: async () => {
                    const chunks = [];
                    let yieldChunk = [];
                    for (const value of await promiseToArray()) {
                        yieldChunk.push(value);
                        if (yieldChunk.length === size) {
                            chunks.push(yieldChunk);
                            yieldChunk = [];
                        }
                    }
                    if (yieldChunk.length) {
                        chunks.push(yieldChunk);
                    }
                    return chunks;
                }
            };
            break;
    }
    return new BasicParallelEnumerable(dataFunc);
};
