import { aggregate } from "./../async/_private/aggregate.js";
import { all } from "./../async/_private/all.js";
import { allAsync } from "./../async/_private/allAsync.js";
import { any } from "./../async/_private/any.js";
import { anyAsync } from "./../async/_private/anyAsync.js";
import { asParallel } from "./../async/_private/asParallel.js";
import { average } from "./../async/_private/average.js";
import { averageAsync } from "./../async/_private/averageAsync.js";
import { chunk } from "./../async/_private/chunk.js";
import { concatenate } from "../async/_private/concatenate.js";
import { contains } from "./../async/_private/contains.js";
import { containsAsync } from "./../async/_private/containsAsync.js";
import { count } from "./../async/_private/count.js";
import { countAsync } from "./../async/_private/countAsync.js";
import { defaultIfEmpty } from "../async/_private/defaultIfEmpty.js";
import { distinct } from "./../async/_private/distinct.js";
import { distinctAsync } from "./../async/_private/distinctAsync.js";
import { each } from "./../async/_private/each.js";
import { eachAsync } from "./../async/_private/eachAsync.js";
import { elementAt } from "./../async/_private/elementAt.js";
import { elementAtOrDefault } from "./../async/_private/elementAtOrDefault.js";
import { except } from "./../async/_private/except.js";
import { exceptAsync } from "./../async/_private/exceptAsync.js";
import { first } from "./../async/_private/first.js";
import { firstAsync } from "./../async/_private/firstAsync.js";
import { firstOrDefault } from "./../async/_private/firstOrDefault.js";
import { firstOrDefaultAsync } from "./../async/_private/firstOrDefaultAsync.js";
import { groupBy } from "./../async/_private/groupBy.js";
import { groupByAsync } from "./../async/_private/groupByAsync.js";
import { groupByWithSel } from "./../async/_private/groupByWithSel.js";
import { groupJoin } from "./../async/_private/groupJoin.js";
import { groupJoinAsync } from "./../async/_private/groupJoinAsync.js";
import { intersect } from "./../async/_private/intersect.js";
import { intersectAsync } from "./../async/_private/intersectAsync.js";
import { join } from "./../async/_private/join.js";
import { last } from "./../async/_private/last.js";
import { lastAsync } from "./../async/_private/lastAsync.js";
import { lastOrDefault } from "./../async/_private/lastOrDefault.js";
import { lastOrDefaultAsync } from "./../async/_private/lastOrDefaultAsync.js";
import { max } from "./../async/_private/max.js";
import { maxAsync } from "./../async/_private/maxAsync.js";
import { min } from "./../async/_private/min.js";
import { minAsync } from "./../async/_private/minAsync.js";
import { ofType } from "./../async/_private/ofType.js";
import { orderBy } from "./../async/_private/orderBy.js";
import { orderByAsync } from "./../async/_private/orderByAsync.js";
import { orderByDescending } from "./../async/_private/orderByDescending.js";
import { orderByDescendingAsync } from "./../async/_private/orderByDescendingAsync.js";
import { partition } from "./../async/_private/partition.js";
import { partitionAsync } from "./../async/_private/partitionAsync.js";
import { reverse } from "./../async/_private/reverse.js";
import { select } from "./../async/_private/select.js";
import { selectAsync } from "./../async/_private/selectAsync.js";
import { selectMany } from "./../async/_private/selectMany.js";
import { selectManyAsync } from "./../async/_private/selectManyAsync.js";
import { sequenceEquals } from "./../async/_private/sequenceEquals.js";
import { sequenceEqualsAsync } from "./../async/_private/sequenceEqualsAsync.js";
import { single } from "./../async/_private/single.js";
import { singleAsync } from "./../async/_private/singleAsync.js";
import { singleOrDefault } from "./../async/_private/singleOrDefault.js";
import { singleOrDefaultAsync } from "./../async/_private/singleOrDefaultAsync.js";
import { skip } from "./../async/_private/skip.js";
import { skipWhile } from "./../async/_private/skipWhile.js";
import { skipWhileAsync } from "./../async/_private/skipWhileAsync.js";
import { sum } from "./../async/_private/sum.js";
import { sumAsync } from "./../async/_private/sumAsync.js";
import { take } from "./../async/_private/take.js";
import { takeWhile } from "./../async/_private/takeWhile.js";
import { takeWhileAsync } from "./../async/_private/takeWhileAsync.js";
import { toArray } from "./../async/_private/toArray.js";
import { toMap } from "./../async/_private/toMap.js";
import { toMapAsync } from "./../async/_private/toMapAsync.js";
import { toObject } from "./../async/_private/toObject.js";
import { toObjectAsync } from "./../async/_private/toObjectAsync.js";
import { toSet } from "./../async/_private/toSet.js";
import { union } from "./../async/_private/union.js";
import { unionAsync } from "./../async/_private/unionAsync.js";
import { where } from "./../async/_private/where.js";
import { whereAsync } from "./../async/_private/whereAsync.js";
import { zip } from "./../async/_private/zip.js";
import { zipAsync } from "./../async/_private/zipAsync.js";
export const bindLinqAsync = (object) => {
    const prototype = object.prototype;
    const bind = (func, key) => {
        const wrapped = function (...params) {
            return func(this, ...params);
        };
        Object.defineProperty(wrapped, "length", { value: func.length - 1 });
        prototype[key] = wrapped;
    };
    bind(aggregate, "aggregate");
    bind(all, "all");
    bind(allAsync, "allAsync");
    bind(any, "any");
    bind(anyAsync, "anyAsync");
    bind(asParallel, "asParallel");
    bind(average, "average");
    bind(averageAsync, "averageAsync");
    bind(chunk, "chunk");
    bind(concatenate, "concatenate");
    bind(contains, "contains");
    bind(containsAsync, "containsAsync");
    bind(count, "count");
    bind(countAsync, "countAsync");
    bind(defaultIfEmpty, "defaultIfEmpty");
    bind(distinct, "distinct");
    bind(distinctAsync, "distinctAsync");
    bind(each, "each");
    bind(eachAsync, "eachAsync");
    bind(elementAt, "elementAt");
    bind(elementAtOrDefault, "elementAtOrDefault");
    bind(except, "except");
    bind(exceptAsync, "exceptAsync");
    bind(first, "first");
    bind(firstAsync, "firstAsync");
    bind(firstOrDefault, "firstOrDefault");
    bind(firstOrDefaultAsync, "firstOrDefaultAsync");
    bind(groupBy, "groupBy");
    bind(groupByAsync, "groupByAsync");
    bind(groupByWithSel, "groupByWithSel");
    bind(groupJoin, "groupJoin");
    bind(groupJoinAsync, "groupJoinAsync");
    bind(intersect, "intersect");
    bind(intersectAsync, "intersectAsync");
    bind(join, "joinByKey");
    bind(last, "last");
    bind(lastAsync, "lastAsync");
    bind(lastOrDefault, "lastOrDefault");
    bind(lastOrDefaultAsync, "lastOrDefaultAsync");
    bind(max, "max");
    bind(maxAsync, "maxAsync");
    bind(min, "min");
    bind(minAsync, "minAsync");
    bind(ofType, "ofType");
    bind(orderBy, "orderBy");
    bind(orderByAsync, "orderByAsync");
    bind(orderByDescending, "orderByDescending");
    bind(orderByDescendingAsync, "orderByDescendingAsync");
    bind(partition, "partition");
    bind(partitionAsync, "partitionAsync");
    bind(reverse, "reverse");
    bind(select, "select");
    bind(selectAsync, "selectAsync");
    bind(selectMany, "selectMany");
    bind(selectManyAsync, "selectManyAsync");
    bind(sequenceEquals, "sequenceEquals");
    bind(sequenceEqualsAsync, "sequenceEqualsAsync");
    bind(single, "single");
    bind(singleAsync, "singleAsync");
    bind(singleOrDefault, "singleOrDefault");
    bind(singleOrDefaultAsync, "singleOrDefaultAsync");
    bind(skip, "skip");
    bind(skipWhile, "skipWhile");
    bind(skipWhileAsync, "skipWhileAsync");
    bind(sum, "sum");
    bind(sumAsync, "sumAsync");
    bind(take, "take");
    bind(takeWhile, "takeWhile");
    bind(takeWhileAsync, "takeWhileAsync");
    bind(toArray, "toArray");
    bind(toMap, "toMap");
    bind(toMapAsync, "toMapAsync");
    bind(toObject, "toObject");
    bind(toObjectAsync, "toObjectAsync");
    bind(toSet, "toSet");
    bind(union, "union");
    bind(unionAsync, "unionAsync");
    bind(where, "where");
    bind(whereAsync, "whereAsync");
    bind(zip, "zip");
    bind(zipAsync, "zipAsync");
};
