import { fromAsync } from "../../async/static/fromAsync.js";
export const takeWhileAsync = (source, predicate) => {
    if (predicate.length === 1) {
        return takeWhileAsync1(source, predicate);
    }
    else {
        return takeWhileAsync2(source, predicate);
    }
};
const takeWhileAsync1 = (source, predicate) => {
    async function* iterator() {
        for (const item of source) {
            if (await predicate(item)) {
                yield item;
            }
            else {
                break;
            }
        }
    }
    return fromAsync(iterator);
};
const takeWhileAsync2 = (source, predicate) => {
    async function* iterator() {
        let index = 0;
        for (const item of source) {
            if (await predicate(item, index++)) {
                yield item;
            }
            else {
                break;
            }
        }
    }
    return fromAsync(iterator);
};
