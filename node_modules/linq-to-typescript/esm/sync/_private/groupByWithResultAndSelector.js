import { StrictEqualityComparer } from "../../shared";
import { BasicEnumerable } from "../BasicEnumerable";
import { groupBy_1, groupBy_1_Simple } from "./groupByShared";
export const groupByWithResultAndSelector = (source, keySelector, elementSelector, resultSelector, comparer) => {
    if (comparer) {
        return groupBy3(source, keySelector, elementSelector, resultSelector);
    }
    else {
        return groupBy3Simple(source, keySelector, elementSelector, resultSelector);
    }
};
const groupBy3Simple = (source, keySelector, elementSelector, resultSelector) => {
    function* iterator() {
        const groupByResult = groupBy_1_Simple(source, keySelector, elementSelector);
        for (const group of groupByResult) {
            yield resultSelector(group.key, group);
        }
    }
    return new BasicEnumerable(iterator);
};
const groupBy3 = (source, keySelector, elementSelector, resultSelector, comparer = StrictEqualityComparer) => {
    function* iterator() {
        const groupByResult = groupBy_1(source, keySelector, elementSelector, comparer);
        for (const group of groupByResult) {
            yield resultSelector(group.key, group);
        }
    }
    return new BasicEnumerable(iterator);
};
