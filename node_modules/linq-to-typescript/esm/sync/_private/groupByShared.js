import { BasicEnumerable } from "../BasicEnumerable.js";
import { Grouping } from "../Grouping.js";
export const groupBy_0 = (source, keySelector, comparer) => {
    return function* generate() {
        const keyMap = new Array();
        for (const value of source) {
            const key = keySelector(value);
            let found = false;
            for (let i = 0; i < keyMap.length; i++) {
                const group = keyMap[i];
                if (comparer(group.key, key)) {
                    group.push(value);
                    found = true;
                    break;
                }
            }
            if (found === false) {
                keyMap.push(new Grouping(key, value));
            }
        }
        for (const keyValue of keyMap) {
            yield keyValue;
        }
    };
};
export const groupBy_0_Simple = (source, keySelector) => {
    return function* iterator() {
        const keyMap = {};
        for (const value of source) {
            const key = keySelector(value);
            const grouping = keyMap[key];
            if (grouping) {
                grouping.push(value);
            }
            else {
                keyMap[key] = new Grouping(key, value);
            }
        }
        for (const value in keyMap) {
            yield keyMap[value];
        }
    };
};
export const groupBy_1_Simple = (source, keySelector, elementSelector) => {
    function* generate() {
        const keyMap = {};
        for (const value of source) {
            const key = keySelector(value);
            const grouping = keyMap[key];
            const element = elementSelector(value);
            if (grouping) {
                grouping.push(element);
            }
            else {
                keyMap[key] = new Grouping(key, element);
            }
        }
        for (const value in keyMap) {
            yield keyMap[value];
        }
    }
    return new BasicEnumerable(generate);
};
export const groupBy_1 = (source, keySelector, elementSelector, comparer) => {
    function* generate() {
        const keyMap = new Array();
        for (const value of source) {
            const key = keySelector(value);
            let found = false;
            for (let i = 0; i < keyMap.length; i++) {
                const group = keyMap[i];
                if (comparer(group.key, key)) {
                    group.push(elementSelector(value));
                    found = true;
                    break;
                }
            }
            if (found === false) {
                const element = elementSelector(value);
                keyMap.push(new Grouping(key, element));
            }
        }
        for (const keyValue of keyMap) {
            yield keyValue;
        }
    }
    return new BasicEnumerable(generate);
};
