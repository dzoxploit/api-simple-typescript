import { StrictEqualityComparer } from "../../shared";
import { BasicEnumerable } from "../BasicEnumerable";
import { groupBy_0, groupBy_0_Simple } from "./groupByShared";
export const groupByWithResult = (source, keySelector, resultSelector, comparer) => {
    if (comparer) {
        return groupBy_2(source, keySelector, resultSelector, comparer);
    }
    else {
        return groupBy_2_Simple(source, keySelector, resultSelector);
    }
};
const groupBy_2_Simple = (source, keySelector, resultSelector) => {
    function* iterator() {
        const groupByResult = groupBy_0_Simple(source, keySelector);
        for (const group of groupByResult()) {
            yield resultSelector(group.key, group);
        }
    }
    return new BasicEnumerable(iterator);
};
const groupBy_2 = (source, keySelector, resultSelector, comparer = StrictEqualityComparer) => {
    function* iterator() {
        const groupByResult = groupBy_0(source, keySelector, comparer);
        for (const group of groupByResult()) {
            yield resultSelector(group.key, group);
        }
    }
    return new BasicEnumerable(iterator);
};
