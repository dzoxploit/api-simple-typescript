"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.groupJoinAsync = void 0;
const BasicParallelEnumerable_1 = require("../BasicParallelEnumerable");
const groupJoinAsync = (outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer) => {
    const generator = comparer ?
        groupJoinWithComparer(outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer) :
        groupJoinSimple(outer, inner, outerKeySelector, innerKeySelector, resultSelector);
    return new BasicParallelEnumerable_1.BasicParallelEnumerable({
        generator,
        type: 0
    });
};
exports.groupJoinAsync = groupJoinAsync;
const groupJoinWithComparer = (outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer) => {
    return async () => {
        const innerKeyMap = [];
        for await (const innerValue of inner) {
            const key = await innerKeySelector(innerValue);
            const record = innerKeyMap.find(x => comparer(x.key, key));
            if (record) {
                record.values.push(innerValue);
            }
            else {
                innerKeyMap.push({ key, values: [innerValue] });
            }
        }
        const outerValues = await outer.toArray();
        const resultPromises = outerValues.map(async (outerValue) => {
            var _a;
            const key = await outerKeySelector(outerValue);
            const innerRecord = (_a = innerKeyMap.find(x => comparer(x.key, key))) !== null && _a !== void 0 ? _a : { key, values: [] };
            return resultSelector(outerValue, innerRecord.values);
        });
        return await Promise.all(resultPromises);
    };
};
const groupJoinSimple = (outer, inner, outerKeySelector, innerKeySelector, resultSelector) => {
    return async () => {
        const innerKeyMap = new Map();
        for await (const innerValue of inner) {
            const key = await innerKeySelector(innerValue);
            const values = innerKeyMap.get(key);
            if (values) {
                values.push(innerValue);
            }
            else {
                innerKeyMap.set(key, [innerValue]);
            }
        }
        const outerValues = await outer.toArray();
        const resultPromises = outerValues.map(async (outerValue) => {
            var _a;
            const key = await outerKeySelector(outerValue);
            const values = (_a = innerKeyMap.get(key)) !== null && _a !== void 0 ? _a : [];
            return resultSelector(outerValue, values);
        });
        return await Promise.all(resultPromises);
    };
};
