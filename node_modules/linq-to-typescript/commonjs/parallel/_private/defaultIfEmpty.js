"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultIfEmpty = void 0;
const BasicParallelEnumerable_1 = require("../BasicParallelEnumerable");
const defaultIfEmpty = (source, defaultValue) => {
    const dataFunc = source.dataFunc;
    const isPromise = defaultValue instanceof Promise;
    let typeData;
    switch (dataFunc.type) {
        case 0:
            {
                const generator = () => dataFunc
                    .generator()
                    .then((values) => {
                    if (values.length) {
                        return values;
                    }
                    if (isPromise) {
                        return defaultValue.then(value => [value]);
                    }
                    else {
                        return [defaultValue];
                    }
                });
                typeData = {
                    generator,
                    type: dataFunc.type
                };
            }
            break;
        case 1:
            {
                const generator = () => {
                    const promises = dataFunc.generator();
                    if (promises.length) {
                        return promises;
                    }
                    if (isPromise) {
                        return [defaultValue];
                    }
                    else {
                        return [Promise.resolve(defaultValue)];
                    }
                };
                typeData = {
                    generator,
                    type: dataFunc.type
                };
            }
            break;
        case 2:
            {
                const generator = async () => {
                    const promises = await dataFunc.generator();
                    if (promises.length) {
                        return promises;
                    }
                    if (isPromise) {
                        return [defaultValue];
                    }
                    else {
                        return [Promise.resolve(defaultValue)];
                    }
                };
                typeData = {
                    generator,
                    type: dataFunc.type
                };
            }
            break;
    }
    return new BasicParallelEnumerable_1.BasicParallelEnumerable(typeData);
};
exports.defaultIfEmpty = defaultIfEmpty;
