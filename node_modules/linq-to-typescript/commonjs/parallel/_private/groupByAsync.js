"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.groupByAsync = void 0;
const Grouping_1 = require("../../sync/Grouping");
const BasicParallelEnumerable_1 = require("../BasicParallelEnumerable");
const _nextIterationAsync_1 = require("./_nextIterationAsync");
const groupByAsync = (source, keySelector, comparer) => {
    if (comparer) {
        return groupByAsync_0(source, keySelector, comparer);
    }
    else {
        return groupByAsync_0_Simple(source, keySelector);
    }
};
exports.groupByAsync = groupByAsync;
const groupByAsync_0 = (source, keySelector, comparer) => {
    const generator = async () => {
        const typedData = (0, _nextIterationAsync_1.nextIterationAsync)(source, async (value) => {
            const key = await keySelector(value);
            return [key, value];
        });
        let values;
        switch (typedData.type) {
            case 1:
                values = await Promise.all(typedData.generator());
                break;
            case 2:
                values = await Promise.all(await typedData.generator());
                break;
        }
        const keyMap = new Array();
        for (const [key, value] of values) {
            let found = false;
            for (let i = 0; i < keyMap.length; i++) {
                const group = keyMap[i];
                if (await comparer(group.key, key) === true) {
                    group.push(value);
                    found = true;
                    break;
                }
            }
            if (found === false) {
                keyMap.push(new Grouping_1.Grouping(key, value));
            }
        }
        const results = new Array();
        for (const g of keyMap) {
            results.push(g);
        }
        return results;
    };
    return new BasicParallelEnumerable_1.BasicParallelEnumerable({
        generator,
        type: 0,
    });
};
const groupByAsync_0_Simple = (source, keySelector) => {
    const generator = async () => {
        const typedData = (0, _nextIterationAsync_1.nextIterationAsync)(source, async (value) => {
            const key = await keySelector(value);
            return [key, value];
        });
        let values;
        switch (typedData.type) {
            case 1:
                values = await Promise.all(typedData.generator());
                break;
            case 2:
                values = await Promise.all(await typedData.generator());
                break;
        }
        const keyMap = {};
        for (const [key, value] of values) {
            const grouping = keyMap[key];
            if (grouping) {
                grouping.push(value);
            }
            else {
                keyMap[key] = new Grouping_1.Grouping(key, value);
            }
        }
        const results = new Array();
        for (const value in keyMap) {
            results.push(keyMap[value]);
        }
        return results;
    };
    return new BasicParallelEnumerable_1.BasicParallelEnumerable({
        generator,
        type: 0,
    });
};
