"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.aggregate = void 0;
const shared_1 = require("../../shared");
const aggregate = (source, seedOrFunc, func, resultSelector) => {
    if (resultSelector) {
        if (!func) {
            throw new ReferenceError("TAccumulate function is undefined");
        }
        return aggregate3(source, seedOrFunc, func, resultSelector);
    }
    else if (func) {
        return aggregate2(source, seedOrFunc, func);
    }
    else {
        return aggregate1(source, seedOrFunc);
    }
};
exports.aggregate = aggregate;
const aggregate1 = async (source, func) => {
    let aggregateValue;
    for await (const value of source) {
        if (aggregateValue) {
            aggregateValue = func(aggregateValue, value);
        }
        else {
            aggregateValue = value;
        }
    }
    if (aggregateValue === undefined) {
        throw new shared_1.InvalidOperationException(shared_1.ErrorString.NoElements);
    }
    return aggregateValue;
};
const aggregate2 = async (source, seed, func) => {
    let aggregateValue = seed;
    for await (const value of source) {
        aggregateValue = func(aggregateValue, value);
    }
    return aggregateValue;
};
const aggregate3 = async (source, seed, func, resultSelector) => {
    let aggregateValue = seed;
    for await (const value of source) {
        aggregateValue = func(aggregateValue, value);
    }
    return resultSelector(aggregateValue);
};
