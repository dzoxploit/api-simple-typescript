"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.singleOrDefault = void 0;
const shared_1 = require("../../shared");
const toArray_1 = require("./toArray");
const singleOrDefault = (source, predicate) => {
    if (predicate) {
        return singleOrDefault2(source, predicate);
    }
    else {
        return singleOrDefault1(source);
    }
};
exports.singleOrDefault = singleOrDefault;
const singleOrDefault1 = async (source) => {
    const dataFunc = source.dataFunc;
    switch (dataFunc.type) {
        case 0: {
            const results = await dataFunc.generator();
            if (results.length > 1) {
                throw new shared_1.InvalidOperationException(shared_1.ErrorString.MoreThanOneElement);
            }
            else if (results.length === 0) {
                return null;
            }
            return results[0];
        }
        case 1: {
            const results = dataFunc.generator();
            if (results.length > 1) {
                throw new shared_1.InvalidOperationException(shared_1.ErrorString.MoreThanOneElement);
            }
            else if (results.length === 0) {
                return null;
            }
            return results[0];
        }
        case 2: {
            const results = await dataFunc.generator();
            if (results.length > 1) {
                throw new shared_1.InvalidOperationException(shared_1.ErrorString.MoreThanOneElement);
            }
            else if (results.length === 0) {
                return null;
            }
            return await results[0];
        }
    }
};
const singleOrDefault2 = async (source, predicate) => {
    const results = await (0, toArray_1.toArray)(source);
    let hasValue = false;
    let singleValue = null;
    for (const value of results) {
        if (predicate(value)) {
            if (hasValue === true) {
                throw new shared_1.InvalidOperationException(shared_1.ErrorString.MoreThanOneElement);
            }
            else {
                hasValue = true;
                singleValue = value;
            }
        }
    }
    return singleValue;
};
