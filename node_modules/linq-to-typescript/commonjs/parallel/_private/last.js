"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.last = void 0;
const shared_1 = require("../../shared");
const last = (source, predicate) => {
    if (predicate) {
        return last2(source, predicate);
    }
    else {
        return last1(source);
    }
};
exports.last = last;
const last1 = async (source) => {
    const dataFunc = source.dataFunc;
    switch (dataFunc.type) {
        case 0: {
            const values = await dataFunc.generator();
            if (values.length === 0) {
                throw new shared_1.InvalidOperationException(shared_1.ErrorString.NoElements);
            }
            else {
                return values[values.length - 1];
            }
        }
        case 1: {
            const promises = dataFunc.generator();
            if (promises.length === 0) {
                throw new shared_1.InvalidOperationException(shared_1.ErrorString.NoElements);
            }
            else {
                return await promises[promises.length - 1];
            }
        }
        case 2: {
            const promises = await dataFunc.generator();
            if (promises.length === 0) {
                throw new shared_1.InvalidOperationException(shared_1.ErrorString.NoElements);
            }
            else {
                return await promises[promises.length - 1];
            }
        }
    }
};
const last2 = async (source, predicate) => {
    const dataFunc = source.dataFunc;
    switch (dataFunc.type) {
        case 0: {
            const values = await dataFunc.generator();
            for (let i = values.length - 1; i >= 0; i--) {
                const value = values[i];
                if (predicate(value)) {
                    return value;
                }
            }
            break;
        }
        case 1: {
            const promises = dataFunc.generator();
            for (let i = promises.length - 1; i >= 0; i--) {
                const value = await promises[i];
                if (predicate(value)) {
                    return value;
                }
            }
            break;
        }
        case 2: {
            const promises = await dataFunc.generator();
            for (let i = promises.length - 1; i >= 0; i--) {
                const value = await promises[i];
                if (predicate(value)) {
                    return value;
                }
            }
            break;
        }
    }
    throw new shared_1.InvalidOperationException(shared_1.ErrorString.NoMatch);
};
