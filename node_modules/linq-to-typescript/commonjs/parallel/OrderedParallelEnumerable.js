"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrderedParallelEnumerable = void 0;
const asAsyncSortedKeyValues_1 = require("./_ordered/asAsyncSortedKeyValues");
const asAsyncSortedKeyValuesSync_1 = require("./_ordered/asAsyncSortedKeyValuesSync");
const asSortedKeyValues_1 = require("./_ordered/asSortedKeyValues");
const asSortedKeyValuesSync_1 = require("./_ordered/asSortedKeyValuesSync");
const BasicParallelEnumerable_1 = require("./BasicParallelEnumerable");
class OrderedParallelEnumerable extends BasicParallelEnumerable_1.BasicParallelEnumerable {
    constructor(orderedPairs) {
        super({
            generator: async () => {
                const asyncVals = orderedPairs();
                const array = [];
                for await (const val of asyncVals) {
                    array.push(...val);
                }
                return array;
            },
            type: 0,
        });
        this.orderedPairs = orderedPairs;
    }
    static generateAsync(source, keySelector, ascending, comparer) {
        let orderedPairs;
        if (source instanceof OrderedParallelEnumerable) {
            orderedPairs = async function* () {
                for await (const pair of source.orderedPairs()) {
                    yield* (0, asAsyncSortedKeyValuesSync_1.asAsyncSortedKeyValuesSync)(pair, keySelector, ascending, comparer);
                }
            };
        }
        else {
            orderedPairs = () => (0, asAsyncSortedKeyValues_1.asAsyncSortedKeyValues)(source, keySelector, ascending, comparer);
        }
        return new OrderedParallelEnumerable(orderedPairs);
    }
    static generate(source, keySelector, ascending, comparer) {
        let orderedPairs;
        if (source instanceof OrderedParallelEnumerable) {
            orderedPairs = async function* () {
                for await (const pair of source.orderedPairs()) {
                    yield* (0, asSortedKeyValuesSync_1.asSortedKeyValuesSync)(pair, keySelector, ascending, comparer);
                }
            };
        }
        else {
            orderedPairs = () => (0, asSortedKeyValues_1.asSortedKeyValues)(source, keySelector, ascending, comparer);
        }
        return new OrderedParallelEnumerable(orderedPairs);
    }
    thenBy(keySelector, comparer) {
        return OrderedParallelEnumerable.generate(this, keySelector, true, comparer);
    }
    thenByAsync(keySelector, comparer) {
        return OrderedParallelEnumerable.generateAsync(this, keySelector, true, comparer);
    }
    thenByDescending(keySelector, comparer) {
        return OrderedParallelEnumerable.generate(this, keySelector, false, comparer);
    }
    thenByDescendingAsync(keySelector, comparer) {
        return OrderedParallelEnumerable.generateAsync(this, keySelector, false, comparer);
    }
}
exports.OrderedParallelEnumerable = OrderedParallelEnumerable;
