"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrderedEnumerable = void 0;
const OrderedAsyncEnumerable_1 = require("../async/OrderedAsyncEnumerable");
const asSortedKeyValues_1 = require("./_ordered/asSortedKeyValues");
const asSortedKeyValuesAsync_1 = require("./_ordered/asSortedKeyValuesAsync");
const BasicEnumerable_1 = require("./BasicEnumerable");
class OrderedEnumerable extends BasicEnumerable_1.BasicEnumerable {
    constructor(orderedPairs) {
        super(function* () {
            for (const orderedPair of orderedPairs()) {
                yield* orderedPair;
            }
        });
        this.orderedPairs = orderedPairs;
    }
    static generate(source, keySelector, ascending, comparer) {
        let orderedPairs;
        if (source instanceof OrderedEnumerable) {
            orderedPairs = function* () {
                for (const pair of source.orderedPairs()) {
                    yield* (0, asSortedKeyValues_1.asSortedKeyValues)(pair, keySelector, ascending, comparer);
                }
            };
        }
        else {
            orderedPairs = () => (0, asSortedKeyValues_1.asSortedKeyValues)(source, keySelector, ascending, comparer);
        }
        return new OrderedEnumerable(orderedPairs);
    }
    static generateAsync(source, keySelector, ascending, comparer) {
        let orderedPairs;
        if (source instanceof OrderedEnumerable) {
            orderedPairs = async function* () {
                for (const pair of source.orderedPairs()) {
                    yield* (0, asSortedKeyValuesAsync_1.asSortedKeyValuesAsync)(pair, keySelector, ascending, comparer);
                }
            };
        }
        else {
            orderedPairs = () => (0, asSortedKeyValuesAsync_1.asSortedKeyValuesAsync)(source, keySelector, ascending, comparer);
        }
        return new OrderedAsyncEnumerable_1.OrderedAsyncEnumerable(orderedPairs);
    }
    thenBy(keySelector, comparer) {
        return OrderedEnumerable.generate(this, keySelector, true, comparer);
    }
    thenByAsync(keySelector, comparer) {
        return OrderedEnumerable.generateAsync(this, keySelector, true, comparer);
    }
    thenByDescending(keySelector, comparer) {
        return OrderedEnumerable.generate(this, keySelector, false, comparer);
    }
    thenByDescendingAsync(keySelector, comparer) {
        return OrderedEnumerable.generateAsync(this, keySelector, false, comparer);
    }
}
exports.OrderedEnumerable = OrderedEnumerable;
