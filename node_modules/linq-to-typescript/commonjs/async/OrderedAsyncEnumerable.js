"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrderedAsyncEnumerable = void 0;
const asAsyncSortedKeyValues_1 = require("./_ordered/asAsyncSortedKeyValues");
const asAsyncSortedKeyValuesSync_1 = require("./_ordered/asAsyncSortedKeyValuesSync");
const asSortedKeyValues_1 = require("./_ordered/asSortedKeyValues");
const asSortedKeyValuesSync_1 = require("./_ordered/asSortedKeyValuesSync");
const BasicAsyncEnumerable_1 = require("./BasicAsyncEnumerable");
class OrderedAsyncEnumerable extends BasicAsyncEnumerable_1.BasicAsyncEnumerable {
    constructor(orderedPairs) {
        super(async function* () {
            for await (const orderedPair of orderedPairs()) {
                yield* orderedPair;
            }
        });
        this.orderedPairs = orderedPairs;
    }
    static generateAsync(source, keySelector, ascending, comparer) {
        let orderedPairs;
        if (source instanceof OrderedAsyncEnumerable) {
            orderedPairs = async function* () {
                for await (const pair of source.orderedPairs()) {
                    yield* (0, asAsyncSortedKeyValuesSync_1.asAsyncSortedKeyValuesSync)(pair, keySelector, ascending, comparer);
                }
            };
        }
        else {
            orderedPairs = () => (0, asAsyncSortedKeyValues_1.asAsyncSortedKeyValues)(source, keySelector, ascending, comparer);
        }
        return new OrderedAsyncEnumerable(orderedPairs);
    }
    static generate(source, keySelector, ascending, comparer) {
        let orderedPairs;
        if (source instanceof OrderedAsyncEnumerable) {
            orderedPairs = async function* () {
                for await (const pair of source.orderedPairs()) {
                    yield* (0, asSortedKeyValuesSync_1.asSortedKeyValuesSync)(pair, keySelector, ascending, comparer);
                }
            };
        }
        else {
            orderedPairs = () => (0, asSortedKeyValues_1.asSortedKeyValues)(source, keySelector, ascending, comparer);
        }
        return new OrderedAsyncEnumerable(orderedPairs);
    }
    thenBy(keySelector, comparer) {
        return OrderedAsyncEnumerable.generate(this, keySelector, true, comparer);
    }
    thenByAsync(keySelector, comparer) {
        return OrderedAsyncEnumerable.generateAsync(this, keySelector, true, comparer);
    }
    thenByDescending(keySelector, comparer) {
        return OrderedAsyncEnumerable.generate(this, keySelector, false, comparer);
    }
    thenByDescendingAsync(keySelector, comparer) {
        return OrderedAsyncEnumerable.generateAsync(this, keySelector, false, comparer);
    }
}
exports.OrderedAsyncEnumerable = OrderedAsyncEnumerable;
