"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.groupByWithSel = void 0;
const Grouping_1 = require("../../sync/Grouping");
const BasicAsyncEnumerable_1 = require("../BasicAsyncEnumerable");
const groupByWithSel = (source, keySelector, elementSelector, comparer) => {
    if (comparer) {
        return groupBy1(source, keySelector, elementSelector, comparer);
    }
    else {
        return groupBy1Simple(source, keySelector, elementSelector);
    }
};
exports.groupByWithSel = groupByWithSel;
const groupBy1Simple = (source, keySelector, elementSelector) => {
    async function* generate() {
        const keyMap = {};
        for await (const value of source) {
            const key = keySelector(value);
            const grouping = keyMap[key];
            const element = elementSelector(value);
            if (grouping) {
                grouping.push(element);
            }
            else {
                keyMap[key] = new Grouping_1.Grouping(key, element);
            }
        }
        for (const value in keyMap) {
            yield keyMap[value];
        }
    }
    return new BasicAsyncEnumerable_1.BasicAsyncEnumerable(generate);
};
const groupBy1 = (source, keySelector, elementSelector, comparer) => {
    async function* generate() {
        const keyMap = new Array();
        for await (const value of source) {
            const key = keySelector(value);
            let found = false;
            for (let i = 0; i < keyMap.length; i++) {
                const group = keyMap[i];
                if (comparer(group.key, key)) {
                    group.push(elementSelector(value));
                    found = true;
                    break;
                }
            }
            if (found === false) {
                const element = elementSelector(value);
                keyMap.push(new Grouping_1.Grouping(key, element));
            }
        }
        for (const value of keyMap) {
            yield value;
        }
    }
    return new BasicAsyncEnumerable_1.BasicAsyncEnumerable(generate);
};
