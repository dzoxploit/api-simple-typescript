import { IAsyncEnumerable, IAsyncEqualityComparer, IEqualityComparer, SelectorKeyType } from "../../types";
import { IGrouping } from "../../types/IGrouping";
declare type GroupByAsyncFunc = {
    <TSource, TKey extends SelectorKeyType>(source: Iterable<TSource>, keySelector: (x: TSource) => Promise<TKey>): IAsyncEnumerable<IGrouping<TKey, TSource>>;
    <TSource, TKey>(source: Iterable<TSource>, keySelector: (x: TSource) => Promise<TKey> | TKey, comparer: IEqualityComparer<TKey> | IAsyncEqualityComparer<TKey>): IAsyncEnumerable<IGrouping<TKey, TSource>>;
};
export declare const groupByAsync: GroupByAsyncFunc;
export {};
