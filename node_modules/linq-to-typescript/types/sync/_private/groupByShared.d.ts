import { IEnumerable, IEqualityComparer, IGrouping, SelectorKeyType } from "../../types";
import { Grouping } from "../Grouping";
export declare const groupBy_0: <TSource, TKey>(source: Iterable<TSource>, keySelector: (x: TSource) => TKey, comparer: IEqualityComparer<TKey>) => () => Generator<Grouping<TKey, TSource>, void, unknown>;
/**
 * @private
 */
export declare const groupBy_0_Simple: <TSource, TKey extends SelectorKeyType>(source: Iterable<TSource>, keySelector: (x: TSource) => TKey) => () => Generator<Grouping<TKey, TSource>, void, unknown>;
/**
 * @private
 */
export declare const groupBy_1_Simple: <TSource, TKey extends SelectorKeyType, TElement>(source: Iterable<TSource>, keySelector: (x: TSource) => TKey, elementSelector: (x: TSource) => TElement) => IEnumerable<IGrouping<TKey, TElement>>;
/**
 * @private
 */
export declare const groupBy_1: <TSource, TKey, TElement>(source: Iterable<TSource>, keySelector: (x: TSource) => TKey, elementSelector: (x: TSource) => TElement, comparer: IEqualityComparer<TKey>) => IEnumerable<IGrouping<TKey, TElement>>;
