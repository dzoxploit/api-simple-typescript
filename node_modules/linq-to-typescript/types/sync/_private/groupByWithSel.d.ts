import { IEnumerable, IEqualityComparer, IGrouping, SelectorKeyType } from "../../types";
export declare type GroupByWithSelFunc = {
    <TSource, TKey extends SelectorKeyType, TElement>(source: Iterable<TSource>, keySelector: ((x: TSource) => TKey), elementSelector: (x: TSource) => TElement): IEnumerable<IGrouping<TKey, TElement>>;
    <TSource, TKey, TElement>(source: Iterable<TSource>, keySelector: ((x: TSource) => TKey), elementSelector: (x: TSource) => TElement, comparer: IEqualityComparer<TKey>): IEnumerable<IGrouping<TKey, TElement>>;
};
export declare const groupByWithSel: <TSource, TKey, TElement>(source: Iterable<TSource>, keySelector: ((x: TSource) => TKey) | ((x: TSource) => number) | ((x: TSource) => string), elementSelector: (x: TSource) => TElement, comparer?: IEqualityComparer<TKey> | undefined) => IEnumerable<IGrouping<string | number | TKey, TElement>>;
